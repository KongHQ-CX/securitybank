version: "3"
volumes:
    kong_data:
      driver: local
services:
  keycloak:
    networks:
      - kong-ee
    image: jboss/keycloak:16.1.1
    container_name: keycloak
    platform: linux/amd64
    hostname: local-keycloak.kong-lab-20.net
    command: -Dkeycloak.profile.feature.upload_scripts=enabled
    healthcheck:
      test: ["CMD", "curl", "-f", "http://keycloak:8080/auth/realms/master"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    environment:
      DB_VENDOR: H2
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      KEYCLOAK_IMPORT: "/data/kong_realm_template.json"
      PROXY_ADDRESS_FORWARDING: "true"
    ports:
      - 8080:8080
    volumes:
      - ${PWD}/misc:/data
  netshoot:
    networks:
      - kong-ee
    image: nicolaka/netshoot:v0.7
    container_name: netshoot
    command:
      - "/bin/bash"
      - "-c"
      - "while true; do ping localhost; sleep 60; done"
    restart: on-failure
  httpbin:
    networks:
      - kong-ee
    image: kong/httpbin:latest
    container_name: httpbin
    hostname: httpbin.org
    restart: on-failure
    ports:
      # 8080 - host machine listen port
      # 80 - container port
      - "18080:80/tcp"
  mockbin:
    networks:
      - kong-ee
    image: dockette/mockbin:latest
    container_name: mockbin
    hostname: mockbin.org
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    ports:
      - "8888:8000/tcp"
  postgres:
    image: postgres:13
    restart: always
    container_name: kong-postgres
    networks:
      - kong-ee
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 10
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_DB: kong
    volumes:
      - kong_data:/var/lib/postgresql/data
    ports:
      - "5432:5432/tcp"
  #Running the bootstrap here
  kong-migrations:
    image: kong/kong-gateway:2.8.4.2
    container_name: kong-migrations
    platform: linux/amd64
    command: kong migrations bootstrap
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PASSWORD: admin
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: kong-postgres
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      KONG_PG_USER: ${KONG_PG_USER:-kong}
    links:
      - postgres:postgres
    networks:
      - kong-ee
    restart: on-failure
  kong-cp:
    image: kong/kong-gateway:2.8.4.2
    user: kong
    container_name: kong-cp
    platform: linux/amd64
    networks:
      - kong-ee
    depends_on:
      - kong-migrations
    restart: on-failure
    ports:
      - "8001-8006:8001-8006/tcp"
      - "8100:8100/tcp"
      - "8444-8447:8444-8447/tcp"
      - "9080:9080/tcp"
    environment:
      KONG_LICENSE_DATA: ${KONG_LICENSE_DATA}

      ## GENERAL
      KONG_AUDIT_LOG: on
      KONG_LOG_LEVEL: notice

      ## HYBRID MODE
      KONG_ROLE: control_plane
      KONG_CLUSTER_MTLS: pki
      KONG_CLUSTER_CERT: /srv/shared/cluster-ssl/control-plane.pem
      KONG_CLUSTER_CERT_KEY: /srv/shared/cluster-ssl/control-plane.key
      KONG_CLUSTER_CA_CERT: /srv/shared/cluster-ssl/cluster-ca.pem

      ## HYBRID MODE CONTROL PLANE
      KONG_CLUSTER_LISTEN: "0.0.0.0:8005"
      KONG_CLUSTER_TELEMETRY_LISTEN: "0.0.0.0:8006"
      KONG_CLUSTER_DATA_PLANE_PURGE_DELAY: 600

      ## NGINX
      KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 http2 ssl"
      KONG_STATUS_LISTEN: "0.0.0.0:8100"
      
      ## DATASTORE
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-postgres
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}

      ## KONG MANAGER
      KONG_ADMIN_GUI_LISTEN: "0.0.0.0:8002, 0.0.0.0:8445 http2 ssl"

      ## VITALS
      KONG_VITALS: "on"

      ## DEVELOPER PORTAL
      KONG_PORTAL: "on"
      KONG_PORTAL_GUI_LISTEN: "0.0.0.0:8003, 0.0.0.0:8446 http2 ssl"
  
      KONG_PORTAL_API_LISTEN: "0.0.0.0:8004, 0.0.0.0:8447 http2 ssl"
      
      KONG_PORTAL_AUTO_APPROVE: "off"
      KONG_PORTAL_EMAIL_VERIFICATION: "off"

      KONG_ANONYMOUS_REPORTS: "off" 
      KONG_ALLOW_DEBUG_HEADER: "on"

      ## MISCELLANEOUS
      KONG_LUA_SSL_TRUSTED_CERTIFICATE: "system"
      
    volumes:
      # Adjust accordingly
      - ./cluster:/srv/shared/cluster-ssl
  kong-dp:
    image: kong/kong-gateway:2.8.4.2
    user: root
    container_name: kong-dp
    platform: linux/amd64
    networks:
      - kong-ee
    depends_on:
      - kong-cp
    restart: on-failure
    ports:
      - "8000:8000/tcp"
      - "8443:8443/tcp"
      - "8101:8101/tcp"
    environment:
      KONG_LICENSE_DATA: ${KONG_LICENSE_DATA}

      ## GENERAL
      KONG_LOG_LEVEL: notice

      ## HYBRID MODE
      KONG_ROLE: data_plane
      KONG_CLUSTER_MTLS: pki
      KONG_CLUSTER_CERT: "/srv/shared/cluster-ssl/data-plane.pem"
      KONG_CLUSTER_CERT_KEY: "/srv/shared/cluster-ssl/data-plane.key"
      KONG_CLUSTER_CA_CERT: "/srv/shared/cluster-ssl/cluster-ca.pem"

      ## HYBRID MODE DATA PLANE
      KONG_CLUSTER_SERVER_NAME: "kong-cp"
      KONG_CLUSTER_CONTROL_PLANE: "kong-cp:8005"
      KONG_CLUSTER_TELEMETRY_ENDPOINT: "kong-cp:8006"
      
      ## NGINX
      KONG_PROXY_LISTEN: "0.0.0.0:8000, 0.0.0.0:8443 http2 ssl"
      KONG_STREAM_LISTEN: "0.0.0.0:5555, 0.0.0.0:5556 ssl reuseport backlog=65536"
      KONG_STATUS_LISTEN: "0.0.0.0:8101"
      KONG_NGINX_WORKER_PROCESSES: 1

      ## DATASTORE
      KONG_DATABASE: "off"
      KONG_ANONYMOUS_REPORTS: "off"

      ## MISCELLANEOUS
      KONG_LUA_SSL_TRUSTED_CERTIFICATE: "/srv/shared/cluster-ssl/cluster-ca.pem,system"

      ## VITALS
      KONG_VITALS: "on"
    volumes:
      # Adjust accordingly
      - ./cluster:/srv/shared/cluster-ssl
networks:
  kong-ee: